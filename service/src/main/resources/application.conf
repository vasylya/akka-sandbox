api {
  host = 127.0.0.1
  port = 9000
}

app {
  user-creation-lag = 2000
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  stdout-loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"

    debug {
      receive = on
      autoreceive = on
      lifecycle = on
      loglevel = "OFF"
    }
  }

  remote {
    log-remote-lifecycle-events = on //off
    netty.tcp {
      # external (logical) hostname
      hostname = ${api.host}
      # external (logical) port
      port = 2551
    }
  }

  persistence {
    journal.plugin = "inmemory-journal"
    snapshot-store.plugin = "inmemory-snapshot-store"
  }

  cluster {
    seed-nodes = ["akka.tcp://sandbox-actor-system@127.0.0.1:2551"]
  }
}

kamon {

  metric {
    tick-interval = 5 seconds
    filters {
      akka-actor {
        includes = ["**"]
        excludes = []
      }
      akka-dispatcher {
        includes = ["**"]
        excludes = []
      }
    }
    track-unmatched-entities = true
  }

  statsd {

    report-system-metrics = true

    simple-metric-key-generator {
      application = "kamon_with_statsd"
      include-hostname = true

      # When the sections that make up the metric names have special characters like dots (very common in dispatcher
      # names) or forward slashes (all actor metrics) we need to sanitize those values before sending them to StatsD
      # with one of the following strategies:
      #   - normalize: changes ': ' to '-' and ' ', '/' and '.' to '_'.
      #   - percent-encode: percent encode the section on the metric name. Please note that StatsD doesn't support
      #     percent encoded metric names, this option is only useful if using our docker image which has a patched
      #     version of StatsD or if you are running your own, customized version of StatsD that supports this.
      metric-name-normalization-strategy = normalize
    }

    # Hostname and port in which your StatsD is running. Remember that StatsD packets are sent using UDP and
    # setting unreachable hosts and/or not open ports wont be warned by the Kamon, your data wont go anywhere.
    hostname = "88.99.165.132"
    port = 8125

    # Interval between metrics data flushes to StatsD. It's value must be equal or greater than the
    # kamon.metrics.tick-interval setting.
    flush-interval = 10 seconds

    # FQCN of the implementation of `kamon.statsd.StatsDMetricsSenderFactory` to be instantiated and use for
    # creating StatsD sender. Provided implementations are:
    #   -  `kamon.statsd.BatchStatsDMetricsSender`. Sends a UDP packet every "kamon.statsd.flush-interval" or
    #       as long as "kamon.statsd.batch-metric-sender.max-packet-size" is reached. Default one.
    #   -  `kamon.statsd.SimpleStatsDMetricsSender`. Sends a UDP packet for each piece of data it receives.
    metric-sender-factory = kamon.statsd.BatchStatsDMetricsSender

    # Settings for `kamon.statsd.BatchStatsDMetricsSender`.
    # Used only if kamon.statsd.metric-sender-factory is set to `kamon.statsd.BatchStatsDMetricsSender`
    batch-metric-sender {
      # Max packet size for UDP metrics data sent to StatsD.
      max-packet-size = 4096 bytes
    }

    time-units = "ms"
    memory-units = "kb"

    subscriptions {
      histogram = ["**"]
      min-max-counter = ["**"]
      gauge = ["**"]
      counter = ["**"]
      trace = ["**"]
      trace-segment = ["**"]
      akka-actor = ["**"]
      akka-dispatcher = ["**"]
      akka-router = ["**"]
      system-metric = ["**"]
      http-server = ["**"]
    }
  }
}